# -*- mode: shell-script; -*-

HISTIGNORE="$HISTIGNORE:hs *:hl:hl *:he *:hd *:hcat *:&:"

hs_mknewscript(){
    echo "# -*- mode: shell-script; -*- " > $1
    chmod +x $1
}

hs_checkinit(){
    [ -d ~/.hs/ ] || mkdir -p ~/.hs
    [ -d ~/.hs/.git ] || {
        pushd ~/.hs
        git init .
        popd
    }
    [ -f ~/.hs/.gitignore ] || {
        cat > ~/.hs/.gitignore <<EOF
*~
EOF
    }
}

hs() {
    # 1: name of new snip
    # 2: number of commands to get (ignored if stdin has data)
    # 3: pattern to filter commands (ignored if stdin has data)
    pipe_input=$(cat -)
    hs_checkinit
    label=$1
    if [ "x$1" = "x" ]; then
        echo "write a name, no spaces:"
        read label
    fi
    fn=~/.hs/$label

    hs_mknewscript $fn

    if [ -z "$pipe_input" ]; then
        num=$2
        if [ "x$2" = "x" ]; then
            num=10
        fi

        if [ -n "$3" ]; then
            history $num | cut -d ' ' -f 4- | grep $3 >> $fn
        else
            history $num | cut -d ' ' -f 4- >> $fn
        fi
    else
        echo "$pipe_input" >> $fn
    fi
    pushd ~/.hs > /dev/null
    $EDITOR $fn
    git add $fn
    git commit -m "created by hs"
    popd > /dev/null
}

hs_expandfilearg() {
    arg=$1
    shopt -s nullglob
    pushd ~/.hs > /dev/null
    files=$(git ls-files [^.]* | grep ${1})
    filessep=$(echo $files | sort | tr '\n' ' ')
    popd > /dev/null
    argl=($filessep)
    [ ${#argl[@]} -eq 0 ] && {
        echo "Couldn't find $1."
        return 0
    }
    [ ${#argl[@]} -eq 1 ] || [ "${argl[0]}" = "$1" ] && {
        echo "${argl[0]}"
        return 1
    }

    echo "${#argl[@]} matches for $1: $files."
    return ${#argl[@]}
}

hs_expandmsg() {
    orig=$1
    expanded=$2
    # not sure we actually want this.
    # [ ${#orig} -ne ${#expanded} ] && echo "hs: expanded $orig to $expanded"
}

hr() {
    [ -z "$1" ] && {
        echo "nothing to run"
        return
    }
    fn=$(hs_expandfilearg $1)
    [ $? -ne 1 ] && {
        echo $fn
        return
    }
    hs_expandmsg $1 $fn
    fn=~/.hs/$fn
    hr_start=$(date '+%s')
    shift
    set -- $@
    . $fn "$@"
    rv=$?
    hr_finish=$(date '+%s')    
    rundir=$(pwd)
    pushd ~/.hs/ > /dev/null
    lastchangerev=$(git rev-list -1 --all $fn)
    ts=$(date)
    git notes append -m "ran $(basename $fn) on ${ts}, returned ${rv} after $(( hr_finish - hr_start )) seconds" $lastchangerev
    popd > /dev/null
    return $rv
}

hlog() {
    fn=$(hs_expandfilearg $1)
    hs_expandmsg $1 $fn
    pushd ~/.hs > /dev/null
    git log $fn
    popd > /dev/null
}

hl() {
    pat=$1
    pushd ~/.hs > /dev/null
    if [ -n "$pat" ]; then
        hfiles=$(git ls-files [^.]* | grep $pat)
    else
        hfiles=$(git ls-files [^.]*)
    fi
    for f in $hfiles ; do
        desc=$(awk 'FNR == 2 { print;}' ~/.hs/$f)
        printf "%-20s $desc\n" "$f"
    done
    popd > /dev/null
}

hd() {
    hs_checkinit
    fn=$(hs_expandfilearg $1)
    [ $? -ne 1 ] && {
        echo "can't delete:" $fn
        return
    }
    hs_expandmsg $1 $fn
    pushd ~/.hs > /dev/null
    git rm $fn
    git commit -m"removed by hd"
    popd > /dev/null
}

# he edits only existing snips
he() {
    hs_checkinit
    fn=$(hs_expandfilearg $1)
    [ $? -ne 1 ] && {
        echo "couldn't find a unique existing snip named that, say more: " $fn
        return
    }
    pushd ~/.hs > /dev/null
    $EDITOR $fn
    git add $fn
    git commit -m "edited by he"
    popd > /dev/null
}

hcat() {
    hs_checkinit
    fn=$(hs_expandfilearg $1)
    [ $? -ne 1 ] && {
        echo $fn
        return
    }
    cat ~/.hs/$fn
}

_complete_hsfiles() {
    local cur prev opts base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    pushd ~/.hs > /dev/null
    hsfiles=$(git ls-files [^.]*)
    popd > /dev/null
    COMPREPLY=($(compgen -W "${hsfiles}" -- ${cur}))
    return 0
}

complete -F _complete_hsfiles hr
complete -F _complete_hsfiles he
complete -F _complete_hsfiles hcat
complete -F _complete_hsfiles hd
complete -F _complete_hsfiles hlog
